{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10415,"status":"ok","timestamp":1700582552717,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"},"user_tz":-330},"id":"UNWmZtcrDSve","outputId":"bbd54f2d-d78d-4390-c1fe-2e2045107b60"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting flask-ngrok\n","  Downloading flask_ngrok-0.0.25-py3-none-any.whl (3.1 kB)\n","Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.10/dist-packages (from flask-ngrok) (2.2.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from flask-ngrok) (2.31.0)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask-ngrok) (3.0.1)\n","Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask-ngrok) (3.1.2)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask-ngrok) (2.1.2)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask-ngrok) (8.1.7)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->flask-ngrok) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->flask-ngrok) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->flask-ngrok) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->flask-ngrok) (2023.7.22)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->Flask>=0.8->flask-ngrok) (2.1.3)\n","Installing collected packages: flask-ngrok\n","Successfully installed flask-ngrok-0.0.25\n"]}],"source":["!pip install flask-ngrok\n","from flask_ngrok import run_with_ngrok\n","from flask import Flask, request, render_template\n","import pickle\n","import numpy as np\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1361,"status":"ok","timestamp":1700582554071,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"},"user_tz":-330},"id":"1432Minb818G","outputId":"f405f0f3-70db-45c2-f6ad-c114bd1eec9e"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-11-21 16:02:32--  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n","Resolving bin.equinox.io (bin.equinox.io)... 52.202.168.65, 54.161.241.46, 18.205.222.128, ...\n","Connecting to bin.equinox.io (bin.equinox.io)|52.202.168.65|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 13921656 (13M) [application/octet-stream]\n","Saving to: ‘ngrok-stable-linux-amd64.zip’\n","\n","ngrok-stable-linux- 100%[===================>]  13.28M  37.0MB/s    in 0.4s    \n","\n","2023-11-21 16:02:32 (37.0 MB/s) - ‘ngrok-stable-linux-amd64.zip’ saved [13921656/13921656]\n","\n","Archive:  ngrok-stable-linux-amd64.zip\n","  inflating: ngrok                   \n"]}],"source":["!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n","!unzip ngrok-stable-linux-amd64.zip"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PEV2DJwubclC","executionInfo":{"status":"ok","timestamp":1700629734009,"user_tz":-330,"elapsed":22014,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"}},"outputId":"23165a82-1ab8-45ea-a80d-f5fbc6b7298b"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1700582554071,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"},"user_tz":-330},"id":"uqJGlePxu25i","outputId":"a38baf47-09a1-47a7-8516-47c23400de10"},"outputs":[{"output_type":"stream","name":"stdout","text":["Authtoken saved to configuration file: /root/.ngrok2/ngrok.yml\n"]}],"source":["!./ngrok authtoken 2XZZAKHfnLGmQNnVN27tSW1qQVT_5HbzsBwnvEwtAW1PWFjcA\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2217,"status":"ok","timestamp":1700582558488,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"},"user_tz":-330},"id":"uXVxOJ7LAod2","outputId":"7efc0483-8c50-44cd-c3a7-894e1e7fc5ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'K-Nearest Neighbors': KNeighborsClassifier(), 'model2': RandomForestClassifier(), 'Naïve Bayes': GaussianNB(), 'Logistic Regression': LogisticRegression(random_state=0)}\n"]}],"source":["with open(\"/content/drive/MyDrive/Mini Project/multiple_models.pkl\", 'rb') as file:\n","    models = pickle.load(file)\n","    print(models)"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":383},"id":"WyvJEzQSv22H","executionInfo":{"status":"error","timestamp":1700633934182,"user_tz":-330,"elapsed":548,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"}},"outputId":"8563f9ca-9dc7-4707-9fcb-012076cb1060"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-9cdf685a3cdf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mflask_ngrok\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrun_with_ngrok\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflask\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mFlask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender_template\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtemplates_folder\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'/content/drive/MyDrive/Mini Project/templates'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'flask_ngrok'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["from flask_ngrok import run_with_ngrok\n","from flask import Flask, request, render_template\n","import pickle\n","\n","templates_folder ='/content/drive/MyDrive/Mini Project/templates'\n","app = Flask(__name__,template_folder=templates_folder)\n","run_with_ngrok(app)  # Integrate Flask with ngrok to make the app accessible\n","\n","# Load multiple models from the pickle file\n","with open(\"/content/drive/MyDrive/Mini Project/multiple_models.pkl\", 'rb') as file:\n","    models = pickle.load(file)\n","@app.route(\"/\")\n","\n","@app.route(\"/home\")\n","def home():\n","    return render_template('index.html')\n","\n","@app.route('/getprediction', methods=['POST'])\n","def getprediction():\n","    model_name = request.form['model']  # Get the selected model name\n","    data_string = request.form['inputData']\n","    values = data_string.split(\", \")\n","\n","    # Convert string values to float or integer\n","    numeric_values = [float(value) if value.replace('.', '', 1).isdigit() else int(value) for value in values]\n","\n","    # Reshape the data for prediction\n","    input_data = np.array(numeric_values).reshape(1, -1)\n","    # Get the selected model and make predictions\n","\n","    if model_name in models:\n","      selected_model = models[model_name]\n","      prediction = selected_model.predict(input_data)\n","\n","      if prediction == 1:\n","         attack_type = ' DANIAL OF SERVICE ATTACK'\n","      else:\n","        attack_type = 'NOT DANIAL OF SERVICE ATTACK'\n","      return render_template('index.html', output=f'Predicted Value: {attack_type}')\n","    else:\n","      return render_template('index.html', output='Model not found')\n","    # if model_name in models:\n","    #      selected_model = models[model_name]\n","    #      prediction = selected_model.predict(input_data)\n","    #      return render_template('index.html', output='Predicted Value: {}'.format(prediction))\n","    # else:\n","    #      return render_template('index.html', output='Model not found')\n","\n","if __name__ == \"__main__\":\n","    app.run()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14823,"status":"ok","timestamp":1698839840425,"user":{"displayName":"Varimadugu Prasanna Kumar Yadav","userId":"04695896744828641586"},"user_tz":-330},"id":"7zA-_OfNAzIt","outputId":"9ae72c1a-bd54-400d-fa7c-848d8395c747"},"outputs":[{"name":"stdout","output_type":"stream","text":[" * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"name":"stderr","output_type":"stream","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"]},{"name":"stdout","output_type":"stream","text":[" * Running on http://23df-35-196-120-130.ngrok-free.app\n"," * Traffic stats available on http://127.0.0.1:4040\n"]},{"name":"stderr","output_type":"stream","text":["INFO:werkzeug:127.0.0.1 - - [01/Nov/2023 11:57:11] \"\u001b[33mGET / HTTP/1.1\u001b[0m\" 404 -\n","INFO:werkzeug:127.0.0.1 - - [01/Nov/2023 11:57:12] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n"]}],"source":["from flask_ngrok import run_with_ngrok\n","from flask import Flask, request, render_template\n","import pickle\n","\n","app = Flask(__name__)\n","run_with_ngrok(app)  # Integrate Flask with ngrok to make the app accessible\n","\n","def home():\n","    return render_template('frontend.html')\n","# Load multiple models from the pickle file\n","with open(\"/content/drive/MyDrive/Mini Project/multiple_models.pkl\", 'rb') as file:\n","    models = pickle.load(file)\n","\n","@app.route('/getprediction', methods=['POST'])\n","def getprediction():\n","    model_name = request.form['model']  # Get the selected model name\n","    input_data = request.form['inputData']  # Get the input data\n","    final_input = [float(x.strip()) for x in input_data.split(',')]\n","\n","    # Get the selected model and make predictions\n","    if model_name in models:\n","        selected_model = models[model_name]\n","        prediction = selected_model.predict([final_input])\n","        return render_template('frontend.html', output=f'Predicted Value: {prediction[0]}')\n","    else:\n","        return render_template('frontend.html', output='Model not found')\n","\n","\n","if __name__ == \"__main__\":\n","    app.run()\n"]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1rmFBo0vX9UsM-Kbfyqho2UmWD5QnGVtp","authorship_tag":"ABX9TyN/4Pi4PAgyjh4wYVllfEKu"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}